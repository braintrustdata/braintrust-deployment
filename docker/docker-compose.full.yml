# Each docker container can be configured with environment variables. Many of
# these variables point the container to the other services, which may be other
# containers you have deployed or centrally-hosted Braintrust services.
#
# Many of the environment variables have a default version as well as a "public"
# version (e.g. `BRAINTRUST_APP_URL` and `BRAINTRUST_APP_PUBLIC_URL`). The
# reason is that docker containers sometimes need different URLs than external
# clients to communicate with other containers on the same machine. For
# instance, docker containers must use the domain `host.docker.internal` instead
# of `localhost` to refer to other services on the same host network.
#
# Some environment variables are used for multiple containers. Usually they will
# be the same, but depending on exactly how you deploy the services, you may
# need to set different values for the same env variable on different
# containers. We document the set of available environment variables here.
#
# - API_PUBLIC_URL: URL of the backend API service for external clients.
# Defaults to the URL of the `braintrust-standalone-api` service accessible from
# the host machine.
#
# - BRAINTRUST_APP_URL: URL of the deployed webapp for internal container use.
# Defaults to the URL of the `braintrust-standalone-app` docker service.
#
# - BRAINTRUST_APP_PUBLIC_URL: URL of the deployed webapp for external clients.
# This is used for services that need to return a public-facing app URL to
# users. Defaults to the URL of the `braintrust-standalone-app` docker service
# accessible from the host machine.
#
# - PROXY_URL: URL of the proxy service for internal container use. Defaults to
# the URL of the `braintrust-standalone-proxy` docker service.
#
# - PROXY_PUBLIC_URL: URL of the proxy service for external clients. Defaults to
# the URL of the `braintrust-standalone-proxy` service accessible from the host
# machine.
#
# - REALTIME_URL: URL of the realtime service for internal container use.
# Defaults to the URL of the `braintrust-standalone-realtime` docker service.
#
# - REALTIME_PUBLIC_URL: URL of the realtime service for external clients.
# Defaults to the URL of the `braintrust-standalone-realtime` service accessible
# from the host machine.
#
# - REDIS_URL: Connection URI for the redis instance for internal container use.
# The general form of the URI is
# `redis://[user[:password]@][host][:port][/db-number][?param1=value1&param2=value2...]`.
# Defaults to the URI for the `braintrust-redis` docker service.
#
# - PG_URL: Connection URI for the postgres instance for internal container use.
# The general form of the URI is
# `postgresql://[user[:password]@][host][:port][/dbname][?param1=value1&param2=value2...]`.
# Defaults to the URI for the 'braintrust-postgres' docker service. See
# https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING-URIS
# for full details on the URI spec.
#
# - CLICKHOUSE_PG_URL: Connection URI for the clickhouse instance over the
# postgres wire protocol, for internal container use. Takes the same URI form as
# PG_URL. Defaults to the postgres URI for the 'braintrust-clickhouse' docker
# service on port 9005.
#
# - CLICKHOUSE_CONNECT_URL: Connection URI for the clickhouse instance over the
# clickhouse-connect protocol, for internal container use. The general form of
# the URI is
# `http[s]:[//[user[:password]@][hosts_and_ports]][/database][?query_parameters]`.
# Defaults to the HTTP URI for the 'braintrust-clickhouse' docker service on
# port 8123. See
# https://clickhouse.com/docs/en/integrations/sql-clients/cli#connection_string
# for full details on the URI spec.
#
# - SUPABASE_ANON_KEY: "anon key" of the local supabase deployment. Defaults to
# the anon key printed out by a local supabase deployment. Note that the service
# role here is anonymous, so the key does not grant any privileged access to the
# DB.
#
# - SUPABASE_PG_URL: DB URL of the local supabase deployment for internal
# container use. Defaults to PG URL of a locally-deployed supabase instance.
#
# - SUPABASE_PUBLIC_URL: API URL of the supabase instance for external clients.
# Defaults to the URL of a locally-deployed supabase instance accessible from
# the host machine.
#
# - PG_POOL_CONFIG_MAX_NUM_CLIENTS: Configure the maximum number of postgres
# clients allowed in use by the API server. Defaults to 10.
#
# Note: if you want to run the API with clickhouse (currently it defaults to
# running without clickhouse), simply uncomment the relevant blocks of
# configuration code. Each relevant block is preceded by a comment starting with
# "To disable clickhouse".

version: "3.1"

services:
  # This is kept in sync with docker-compose.api.yml, except for the environment
  # variable settings of `braintrust-standalone-api`.
  braintrust-redis:
    image: public.ecr.aws/braintrust/redis:latest
    ports:
      - 6479:6379
    extra_hosts:
      - "host.docker.internal:host-gateway"
  braintrust-postgres:
    image: public.ecr.aws/braintrust/postgres:latest
    command: postgres -c config_file=/etc/postgresql.conf
    environment:
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    ports:
      - 5532:5432
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - api_pg_volume:/var/lib/postgresql/data
  # To disable clickhouse, comment out this entire service definition.
  #braintrust-clickhouse:
  #  image: public.ecr.aws/braintrust/clickhouse:latest
  #  environment:
  #    CLICKHOUSE_USER: default
  #    CLICKHOUSE_PASSWORD: default
  #  ports:
  #    # Port for connecting through clickhouse-connect.
  #    - 8123:8123
  #    # Port for connecting through postgres.
  #    - 9005:9005
  #    # Port for connecting through the clickhouse client binary. This is not
  #    # used by Braintrust but can be useful for poking around the clickhouse
  #    # instance yourself.
  #    - 9000:9000
  #  extra_hosts:
  #    - "host.docker.internal:host-gateway"
  #  volumes:
  #    - api_clickhouse_volume:/var/lib/clickhouse
  #    - api_clickhouse_logs_volume:/var/log/clickhouse-server
  #    # In order to configure clickhouse to store data in Amazon S3, you may
  #    # pull the template configuration file at
  #    # https://github.com/braintrustdata/braintrust-deployment/blob/main/docker/clickhouse/storage_config.xml
  #    # and mount it into the clickhouse container. You will need to configure
  #    # your S3 URL in 'storage_config.xml' and include any relevant auth
  #    # credentials in the clickhouse container. See
  #    # https://clickhouse.com/docs/en/integrations/s3#managing-credentials for
  #    # full details.
  #    # - ./clickhouse/storage_config.xml:/etc/clickhouse-server/config.d/storage_config.xml
  braintrust-standalone-api:
    image: public.ecr.aws/braintrust/standalone-api:latest
    environment:
      BRAINTRUST_APP_URL: http://host.docker.internal:3000
      BRAINTRUST_APP_PUBLIC_URL: http://localhost:3000
      PROXY_URL: http://host.docker.internal:8787/v1
      # Here we are using the http scheme because the backend API connects to
      # the realtime service over HTTP.
      REALTIME_URL: http://host.docker.internal:8788
      PG_URL: postgres://postgres:postgres@host.docker.internal:5532/postgres
      #CLICKHOUSE_PG_URL: postgres://default:default@host.docker.internal:9005/default
      #CLICKHOUSE_CONNECT_URL: clickhouse://default:default@host.docker.internal:8123/default
      # To disable clickhouse, replace the CLICKHOUSE_PG_URL and
      # CLICKHOUSE_CONNECT_URL settings with the ones below, which explicitly
      # set them to an empty string.
      CLICKHOUSE_PG_URL: ""
      CLICKHOUSE_CONNECT_URL: ""
      REDIS_URL: redis://host.docker.internal:6479/0
    ports:
      - 8000:8000
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      # To disable clickhouse, comment out this dependency on
      # `braintrust-clickhouse`.
      #braintrust-clickhouse:
      #  condition: service_healthy
      braintrust-redis:
        condition: service_healthy
      braintrust-postgres:
        condition: service_healthy

  braintrust-standalone-app:
    image: public.ecr.aws/braintrust/standalone-app:latest
    environment:
      # We specify public URLs here because these variables are used by browser
      # client itself.
      API_PUBLIC_URL: http://localhost:8000
      BRAINTRUST_APP_PUBLIC_URL: http://localhost:3000
      PROXY_PUBLIC_URL: http://localhost:8787/v1
      # Here we are using the ws scheme because the webapp connects to the
      # realtime service over websockets.
      REALTIME_PUBLIC_URL: ws://localhost:8788
      SUPABASE_PUBLIC_URL: http://localhost:54321
      SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
      # Unlike the other URL env vars, this variable is only used inside the
      # container, so it is the "nonpublic" version.
      SUPABASE_PG_URL: postgresql://postgres:postgres@host.docker.internal:54322/postgres
    ports:
      - 3000:3000
    extra_hosts:
      - "host.docker.internal:host-gateway"
  braintrust-standalone-app-bootstrap:
    image: public.ecr.aws/braintrust/standalone-app-bootstrap:latest
    environment:
      # This container allows you to issue api keys to new users (as a way to
      # bootstrap access). You can lock down that webserver so that only admins
      # can access it. For example, you do not need to expose that container's
      # port externally. CONTAINER_SERVER_SECRET is a password that you can use
      # as an additional layer of protection for that web server.
      # CONTAINER_SERVER_SECRET's value must be included in the HTTP request as
      # a header 'Authorization: Bearer [secret]'.
      CONTAINER_SERVER_SECRET: my-secure-secret-token
      SUPABASE_PG_URL: postgresql://postgres:postgres@host.docker.internal:54322/postgres
    ports:
      - 8100:8100
    extra_hosts:
      - "host.docker.internal:host-gateway"
  braintrust-standalone-proxy:
    image: public.ecr.aws/braintrust/standalone-proxy:latest
    environment:
      BRAINTRUST_APP_URL: http://host.docker.internal:3000
    ports:
      - 8787:8787
    extra_hosts:
      - "host.docker.internal:host-gateway"
  braintrust-standalone-realtime:
    image: public.ecr.aws/braintrust/standalone-realtime:latest
    ports:
      - 8788:8788
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  api_pg_volume: null
  # To disable clickhouse, comment out these volume definitions.
  #api_clickhouse_volume: null
  #api_clickhouse_logs_volume: null
